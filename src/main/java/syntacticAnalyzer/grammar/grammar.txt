prog -> classDeclRep funcDefRep 'main' funcBody ';'

classDeclRep -> classDecl classDeclRep
classDeclRep -> EPSILON
funcDefRep -> funcDef funcDefRep
funcDefRep -> EPSILON


classDecl -> 'class' 'id' classExOpt '{' varOrFuncCheck '}' ';'

varOrFuncCheck -> type 'id' varCheckNext | EPSILON
varCheckNext -> arraySizeRep varOrFuncCheck  | '(' fParams ')' ';' funcDeclRep 

classExOpt ->  ':' 'id' classExMoreRep
classExOpt -> EPSILON

classExMoreRep -> ',' 'id' classExMoreRep
classExMoreRep -> EPSILON

varDeclRep -> varDecl varDeclRep
varDeclRep -> EPSILON

funcDeclRep -> funcDecl funcDeclRep
funcDeclRep -> EPSILON


funcDecl -> type 'id' '(' fParams ')' ';' 
funcHead -> type 'id' funcHeadChoice
funcHeadChoice -> 'sr' 'id' '(' fParams ')'
               | '(' fParams ')'
           
funcDef -> funcHead funcBody ';'

funcBody -> '{' varDeclFuncRep statementRep '}' 

varDeclFuncRep -> varDecl varDeclFuncRep
varDeclFuncRep -> EPSILON

statementRep -> statement statementRep
statementRep -> EPSILON

varDecl -> type 'id' arraySizeRep ';' 

arraySizeRep -> arraySize arraySizeRep
arraySizeRep -> EPSILON

statement -> assignStat ';'
 | 'if' '(' expr ')' 'then' statBlock 'else' statBlock ';'
 | 'for' '(' type 'id' assignOp expr ';' relExpr ';' assignStat ')' statBlock ';'
 | 'read' '(' variable ')' ';'
 | 'write' '(' expr ')' ';'
 | 'return' '(' expr ')' ';' 
 
 assignStat -> variable assignOp expr
 
 statBlock -> '{' statementRep '}' | statement | EPSILON 
 
expr -> arithExpr exprNext 
exprNext -> relExpr | arithExpr
relExpr -> relOp arithExpr
arithExpr -> addOp term  | term
 
 sign -> '+' | '-'

term -> factor termPrime
termPrime -> multOp factor termPrime
       | EPSILON

factor -> varOrFuncCall
 | 'intNum' | 'floatNum'
 |  arithExprorFun
 | 'not' factor
 | sign factor

varOrFuncCall -> idnestRep 'id' varOrFuncCallNext
varOrFuncCallNext -> indiceRep 

variable -> idnestRep 'id' indiceRep 
 
idnestRep -> idnest idnestRep
idnestRep -> EPSILON

indiceRep -> indice indiceRep
indiceRep -> EPSILON


arithExprorFun -> '(' arithExprorFunNext
arithExprorFunNext -> functionCall | arithExpr ')' 

functionCall -> aParams ')'



 


