prog               -> classDeclRep funcDefRep main funcBody ;
classDeclRep       -> classDecl classDeclRep | EPSILON
funcDefRep         -> funcDef funcDefRep | EPSILON
classDecl          -> class id classExOpt { varOrFuncCheck } ;
varOrFuncCheck     -> type id varCheckNext | EPSILON
varCheckNext       -> arraySizeRep ; varOrFuncCheck | ( fParams ) ; funcDeclRep
classExOpt         -> : id classExMoreRep | EPSILON
classExMoreRep     -> , id classExMoreRep | EPSILON
funcDeclRep        -> funcDecl funcDeclRep | EPSILON
funcDecl           -> type id ( fParams ) ;
funcHead           -> type id funcHeadChoice
funcHeadChoice     -> sr id ( fParams ) | ( fParams )
funcDef            -> funcHead funcBody ;
funcBody           -> { varDeclStatFuncRep }
varDeclStatFuncRep -> varDeclNotId varDeclStatFuncRep | idProd varDeclStatFuncRep | statementNoId varDeclStatFuncRep | EPSILON
idProd             -> id idProdNext
idProdNext         -> varDeclId | oldVarEndNest | ( aParams ) . idProd
oldVarEndNest      -> indiceRep oldVarEndNestNext
oldVarEndNestNext  -> assignStatEnd | . idProd | ;
varDeclId          -> id varDeclNext
assignStatEnd      -> assignOp expr ;
varDeclNotId       -> typeNotId id varDeclNext
varDeclNext        -> arraySizeRep ;
arraySizeRep       -> arraySize arraySizeRep | EPSILON
statement          -> statementNoId | statementId
statementId        -> assignStat ;
statementNoId      -> if ifRest | for forRest | read ( varStart ) ; | write ( expr ) ; | return ( expr ) ;

ifRest 			   -> ( expr ) then statBlock else statBlock ;
forRest 		   -> ( type id assignOp expr ; relExpr ; assignStat ) statBlock ;
statementRep       -> statement statementRep | EPSILON
assignStat         -> varStart assignOp expr
statBlock          -> { statementRep } | statement | EPSILON
expr               -> arithExpr exprNext
exprNext           -> relOp arithExpr | EPSILON
relExpr            -> arithExpr relOp arithExpr
arithExpr          -> term arithExprPrime
arithExprPrime     -> EPSILON | addOp term arithExprPrime
sign               -> + | -
term               -> factor termPrime
termPrime          -> multOp factor termPrime | EPSILON
factor             -> varOrFuncCall | intNum | floatNum | ( arithExpr ) | not factor | sign factor
varOrFuncCall      -> id varOrFuncCallNext
varOrFuncCallNext  -> varIndice | ( varFuncParams | . varStart | EPSILON
varFuncParams      -> aParams ) varFuncParamsNext
varFuncParamsNext  -> . varOrFuncCall | EPSILON
varStart           -> id varNext
varNext            -> varIndice | ( varAParams | . varStart | EPSILON
varIndice          -> indice varIndiceNext
varIndiceNext      -> varIndice | varIndiceNextNext
varIndiceNextNext  -> . varStart | EPSILON
varAParams         -> aParams ) varAParamsNext
varAParamsNext     -> . varStart | EPSILON
type               -> typeNotId | id
typeNotId          -> integer | float
indiceRep          -> indice indiceRep | EPSILON
indice             -> [ arithExpr ]
arraySize          -> [ intNum ]
fParams            -> type id arraySizeRep fParamsTailRep | EPSILON
fParamsTailRep     -> fParamsTail fParamsTailRep | EPSILON
aParams            -> expr aParamsTailRep | EPSILON
aParamsTailRep     -> aParamsTail aParamsTailRep | EPSILON
fParamsTail        -> , type id arraySizeRep
aParamsTail        -> , expr
assignOp           -> =
relOp              -> eq | neq | lt | gt | leq | geq
addOp              -> + | - | or
multOp             -> * | / | and
